name: MSDO
on:
  push:
    branches:
      - main
  pull_request:
    branches: ["main"]
 
jobs:
  sample:
    name: Microsoft Security DevOps
    runs-on: windows-latest
 
    permissions:
      contents: read
      id-token: write
      actions: read
      security-events: write
 
    steps:
      # Checkout your code repository to scan
      - uses: actions/checkout@v3
 
      # Run MSDO analyzers (IaC misconfigurations)
      - name: Run Microsoft Security DevOps
        uses: microsoft/security-devops-action@latest
        id: msdo
        with:
          categories: 'IaC'
          tools: 'checkov,terrascan'
 
      # Install Trivy CLI v0.67.0
      - name: Install Trivy CLI v0.67.0
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/aquasecurity/trivy/releases/download/v0.67.0/trivy_0.67.0_windows-64bit.zip" -OutFile trivy.zip
          Expand-Archive trivy.zip -DestinationPath $env:USERPROFILE\trivy
          echo "$env:USERPROFILE\trivy" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
 
      - name: Check Trivy version
        shell: pwsh
        run: trivy --version
 
      # Run Trivy explicitly in filesystem mode for secret scanning
      - name: Run Trivy for secrets in IaC
        shell: pwsh
        run: trivy fs --scanners secret --severity MEDIUM,HIGH,CRITICAL --ignore-unfixed --format sarif --output trivy-secrets.sarif .
 
      # Upload MSDO results
      - name: Upload MSDO alerts to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.msdo.outputs.sarifFile }}
 
      # Upload Trivy results
      - name: Upload Trivy secret scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-secrets.sarif
 
      # Install Gitleaks
      - name: Install Gitleaks
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/gitleaks/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_windows_x64.zip" -OutFile gitleaks.zip
          Expand-Archive gitleaks.zip -DestinationPath $env:USERPROFILE\gitleaks
          echo "$env:USERPROFILE\gitleaks" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
 
      # Create custom Gitleaks config
      - name: Write Gitleaks config
        shell: pwsh
        run: |
          @"
          [[rules]]
          id = "TF_ADMIN_PASSWORD"
          description = "Hardcoded admin_password in Terraform"
          regex = '''admin_password\s*=\s*".+"'''
          tags = ["terraform", "password", "custom"]
          "@ | Out-File -FilePath gitleaks.toml -Encoding utf8
 
      # Run Gitleaks with custom rule
      - name: Run Gitleaks secret scan
        shell: pwsh
        continue-on-error: true
        run: gitleaks detect --config gitleaks.toml --source . --report-format sarif --report-path gitleaks.sarif
 
      # Upload Gitleaks results
      - name: Upload Gitleaks secret scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
